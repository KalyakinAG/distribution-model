//@skip-check module-unused-method
//@skip-check object-module-export-variable
//@skip-check module-accessibility-at-client

//  Подсистема "Модель распределения"
//	Автор: Калякин Андрей Г.
//  https://github.com/KalyakinAG/distribution-model
//  https://infostart.ru/public/1620797/

#Область ОписаниеПеременных

Перем Схема Экспорт;
Перем МенеджерВременныхТаблиц Экспорт;

Перем ТаблицаРаспределения Экспорт;
Перем ТаблицаОтношения Экспорт;
Перем БазаРаспределения Экспорт;
Перем РезультатРаспределения Экспорт;

Перем Дерево Экспорт;
Перем Стек Экспорт;
Перем МаксУровень Экспорт;
Перем ВидРаспределения;

Перем ЭлементТаблицы;
Перем ЭлементБазы;
Перем ЭлементОтношения;
Перем СтрокаРезультата Экспорт;
Перем ПоляРезультата Экспорт;

Перем Точность Экспорт;
Перем Источник;
Перем ТипПоля;
Перем ТипИсточника;
Перем ПолеРаспределения;

Перем ВидыРаспределения;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция Полное() Экспорт
	Схема.Вставить("ВидРаспределения", ВидыРаспределения.Полное);
	Возврат ЭтотОбъект;
КонецФункции

Функция ПоБазе() Экспорт
	Схема.Вставить("ВидРаспределения", ВидыРаспределения.ПоБазе);
	Возврат ЭтотОбъект;
КонецФункции

Функция ПоПорядку() Экспорт
	Схема.Вставить("ВидРаспределения", ВидыРаспределения.ПоПорядку);
	Возврат ЭтотОбъект;
КонецФункции

Функция Точность(Значение) Экспорт
	Точность = Значение;
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьМенеджерВременныхТаблиц(НовыйМенеджерВременныхТаблиц) Экспорт
	МенеджерВременныхТаблиц = НовыйМенеджерВременныхТаблиц;
	Возврат ЭтотОбъект;
КонецФункции

Функция Таблица(ИмяИсточника, Псевдоним = "") Экспорт
	ТипИсточника = "Таблица";
	Источник = ДобавитьИсточникМодели(ТипИсточника, ИмяИсточника, Псевдоним);
	Возврат ЭтотОбъект;
КонецФункции

Функция Отношение(ИмяИсточника, Псевдоним = Неопределено) Экспорт
	ТипИсточника = "Отношение";
	Источник = ДобавитьИсточникМодели(ТипИсточника, ИмяИсточника, Псевдоним);
	Возврат ЭтотОбъект;
КонецФункции

Функция База(ИмяИсточника, Псевдоним = Неопределено) Экспорт
	ТипИсточника = "База";
	Источник = ДобавитьИсточникМодели(ТипИсточника, ИмяИсточника, Псевдоним);
	Возврат ЭтотОбъект;
КонецФункции

Функция ИзмеренияТаблицы() Экспорт
	ТипПоля = "ИзмеренияТаблицы";
	Источник.Вставить(ТипПоля, Новый Массив);
	Возврат ЭтотОбъект;
КонецФункции

Функция ИзмеренияБазы() Экспорт
	ТипПоля = "ИзмеренияБазы";
	Источник.Вставить(ТипПоля, Новый Массив);
	Возврат ЭтотОбъект;
КонецФункции

Функция Измерения() Экспорт
	ТипПоля = "Измерения";
	Источник.Вставить(ТипПоля, Новый Массив);
	Возврат ЭтотОбъект;
КонецФункции

Функция Ресурсы() Экспорт
	ТипПоля = "Ресурсы";
	Источник.Вставить(ТипПоля, Новый Массив);
	Возврат ЭтотОбъект;
КонецФункции

Функция Реквизиты() Экспорт
	ТипПоля = "Реквизиты";
	Источник.Вставить(ТипПоля, Новый Массив);
	Возврат ЭтотОбъект;
КонецФункции

// Поле
// 
// Параметры:
//  Поле - Строка - Поле
//  ПсевдонимИсходный - Строка - Псевдоним исходный
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МодельРаспределения -- Поле
Функция Поле(Поле, ПсевдонимИсходный = "") Экспорт
	Перем Поля;
	Если Поле = "*" Тогда
		Если ТипПоля = "Реквизиты" Тогда
			// знак "*" для поля Реквизиты или для Таблицы означает выборку всех еще не задействованных полей источника
			Источник.Реквизиты.Добавить(СтруктураПоля("*"));
			Возврат ЭтотОбъект;
		КонецЕсли;
		//  Измерения таблицы
		Если ТипИсточника = "Таблица" Тогда
			ВызватьИсключение "Нельзя использовать '*' для описания полей измерений таблицы";
		КонецЕсли;
		//  Измерения отношения
		Если ТипИсточника = "Отношение" Тогда
			Если ТипПоля = "ИзмеренияБазы" Тогда
				ВызватьИсключение "Нельзя использовать '*' для описания полей измерений базы в отношении";
			КонецЕсли;
			Если ТипПоля = "ИзмеренияТаблицы" Тогда
				Если Схема.Таблица.Свойство("Измерения", Поля) Тогда
					Для Каждого _Поле Из Поля Цикл
						Поле(_Поле.Псевдоним);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			Если Схема.Таблица.Свойство(ТипПоля, Поля) Тогда
				Для Каждого _Поле Из Поля Цикл
					Поле(_Поле.Псевдоним);
				КонецЦикла;
			КонецЕсли;
			Возврат ЭтотОбъект;
		КонецЕсли;
		//  Измерения Базы из Отношения
		Если ТипПоля = "Измерения" И Схема.Свойство("Отношение") Тогда
			Если Схема.Отношение.Свойство("ИзмеренияБазы", Поля) Тогда
				Для Каждого _Поле Из Поля Цикл
					Поле(_Поле.Псевдоним);
				КонецЦикла;
			КонецЕсли;
			Возврат ЭтотОбъект;
		КонецЕсли;
		//  Измерения Базы из Таблицы		
		Если Схема.Таблица.Свойство(ТипПоля, Поля) Тогда
			Для Каждого _Поле Из Поля Цикл
				Поле(_Поле.Псевдоним);
			КонецЦикла;
		КонецЕсли;
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	Если ПустаяСтрока(ПсевдонимИсходный) Тогда
		Псевдоним = ОбщийКлиентСервер.ОкончаниеСтрокиПослеРазделителя(Поле);
	Иначе
		Псевдоним = ПсевдонимИсходный;
	КонецЕсли;
	Источник[ТипПоля].Добавить(СтруктураПоля(Поле, Псевдоним));
	Возврат ЭтотОбъект;
КонецФункции

Функция Отбор(Выражение) Экспорт
	Источник.Отбор.Добавить(Выражение);
	Возврат ЭтотОбъект;
КонецФункции

// Порядок
// 
// Параметры:
//  Выражение - Строка - Выражение
//  Направление - Неопределено, Строка, НаправлениеПорядкаСхемыЗапроса - Направление
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МодельРаспределения - Порядок
Функция Порядок(Выражение, Направление = Неопределено) Экспорт
	Если ТипЗнч(Направление) = Тип("Строка") Тогда
		Если Направление = "-" Тогда
			Источник.Порядок.Добавить(Новый Структура("Выражение, Направление", Выражение, НаправлениеПорядкаСхемыЗапроса.ПоУбыванию));
			Возврат ЭтотОбъект;
		КонецЕсли;
		Если Направление = "+" Тогда
			Источник.Порядок.Добавить(Новый Структура("Выражение, Направление", Выражение, НаправлениеПорядкаСхемыЗапроса.ПоВозрастанию));
			Возврат ЭтотОбъект;
		КонецЕсли;
		Источник.Порядок.Добавить(Новый Структура("Выражение, Направление", Выражение, НаправлениеПорядкаСхемыЗапроса[Направление]));
		Возврат ЭтотОбъект;
	КонецЕсли;				
	Источник.Порядок.Добавить(Новый Структура("Выражение, Направление", Выражение, Направление));
	Возврат ЭтотОбъект;
КонецФункции

Функция Автопорядок() Экспорт
	Источник.Автопорядок = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Процедура Инициализировать() Экспорт
	ЕстьОтношение = Схема.Свойство("Отношение");
	МодельЗапроса = Общий.МодельЗапроса(МенеджерВременныхТаблиц);
	ДобавитьЗапросИсточника(МодельЗапроса, "Таблица");
	Если ЕстьОтношение Тогда
		ДобавитьЗапросИсточника(МодельЗапроса, "Отношение");
	КонецЕсли;
	ДобавитьЗапросИсточника(МодельЗапроса, "База");
	МодельЗапроса.ВыполнитьЗапрос();
	ТаблицаРаспределения = МодельЗапроса.ВыгрузитьРезультат("Таблица");
	БазаРаспределения = МодельЗапроса.ВыгрузитьРезультат("База");
	Если ЕстьОтношение Тогда
		ТаблицаОтношения = МодельЗапроса.ВыгрузитьРезультат("Отношение");
	Иначе
		ТаблицаОтношения = Неопределено;
	КонецЕсли;
	//  ВидРаспределения
	Если НЕ Схема.Свойство("ВидРаспределения", ВидРаспределения) Тогда
		Если Схема.База.Свойство("Порядок") Тогда
			ВидРаспределения = ВидыРаспределения.ПоПорядку;
		Иначе
			Ресурс = Схема.Таблица.Ресурсы[0].Псевдоним;
			Если ТаблицаРаспределения.Итог(Ресурс) > БазаРаспределения.Итог(Ресурс) Тогда
				ВидРаспределения = ВидыРаспределения.Полное;
			Иначе
				ВидРаспределения = ВидыРаспределения.ПоБазе;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//  Отборы
	ОтборОтношения = Новый Структура;
	ОтборБазы = Новый Структура;
	Если ЕстьОтношение Тогда
		Для Каждого Поле Из Схема.Отношение.ИзмеренияТаблицы Цикл
			ОтборОтношения.Вставить(Поле.Псевдоним);
		КонецЦикла;
		Для Каждого Поле Из Схема.Отношение.ИзмеренияБазы Цикл
			ОтборБазы.Вставить(Поле.Псевдоним);
		КонецЦикла;
	Иначе
		Для Каждого Поле Из Схема.Таблица.Измерения Цикл
			ОтборБазы.Вставить(Поле.Псевдоним);
		КонецЦикла;
	КонецЕсли;
	//  Результат распределения
	МассивПолейРезультата = Новый Массив;
	РезультатРаспределения = Новый ТаблицаЗначений;
	Для Каждого Колонка Из БазаРаспределения.Колонки Цикл
		РезультатРаспределения.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения,, "NULL"));
		МассивПолейРезультата.Добавить(Колонка.Имя);
	КонецЦикла;
	Для Каждого Колонка Из ТаблицаРаспределения.Колонки Цикл
		Если РезультатРаспределения.Колонки.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РезультатРаспределения.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения,, "NULL"));
		МассивПолейРезультата.Добавить(Колонка.Имя);
	КонецЦикла;
	ПоляРезультата = СтрСоединить(МассивПолейРезультата, ",");
	//  Дерево = [{Строка, Элементы: [{Строка, Элементы: [{Строка, Ресурсы: {}}, ...], ...]}, ...]}, ...]
	Дерево = Новый Массив;
	Если ЕстьОтношение Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаРаспределения Цикл
			ЗаполнитьЗначенияСвойств(ОтборОтношения, СтрокаТаблицы);
			НайденныеСтрокиОтношения = ТаблицаОтношения.НайтиСтроки(ОтборОтношения);
			ЭлементТаблицы = Новый Структура("Строка, Элементы", СтрокаТаблицы, Новый Массив);
			Для Каждого СтрокаОтношения Из НайденныеСтрокиОтношения Цикл
				ЗаполнитьЗначенияСвойств(ОтборБазы, СтрокаОтношения);
				НайденныеСтрокиБазы = БазаРаспределения.НайтиСтроки(ОтборБазы);
				ЭлементОтношения = Новый Структура("Строка, Элементы", СтрокаОтношения, Новый Массив);			
				Для Каждого СтрокаБазы Из НайденныеСтрокиБазы Цикл
					ЭлементБазы = Новый Структура("Строка", СтрокаБазы);
					ЭлементОтношения.Элементы.Добавить(ЭлементБазы);
				КонецЦикла;
				ЭлементТаблицы.Элементы.Добавить(ЭлементОтношения);
			КонецЦикла;
			Дерево.Добавить(ЭлементТаблицы);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицы Из ТаблицаРаспределения Цикл
			ЭлементТаблицы = Новый Структура("Строка, Элементы", СтрокаТаблицы, Новый Массив);
				ЗаполнитьЗначенияСвойств(ОтборБазы, СтрокаТаблицы);
				НайденныеСтрокиБазы = БазаРаспределения.НайтиСтроки(ОтборБазы);
				ЭлементОтношения = Новый Структура("Строка, Элементы", СтрокаТаблицы, Новый Массив);			
				Для Каждого СтрокаБазы Из НайденныеСтрокиБазы Цикл
					ЭлементБазы = Новый Структура("Строка", СтрокаБазы);
					ЭлементОтношения.Элементы.Добавить(ЭлементБазы);
				КонецЦикла;
				ЭлементТаблицы.Элементы.Добавить(ЭлементОтношения);
			Дерево.Добавить(ЭлементТаблицы);
		КонецЦикла;
	КонецЕсли;
	//  Стек = [{Элемент, Индекс}, ...]
	Стек = Новый Массив;
	Стек.Добавить(Новый Структура("Элемент, Индекс", Неопределено, -1));
	МаксУровень = 2;
КонецПроцедуры

Функция НайтиСледующийУзел(Уровень, Узел)
	Пока Истина Цикл
		Если Уровень = -1 Тогда
			Возврат Ложь;
		КонецЕсли;
		Узел = РаботаСМассивом.Последний(Стек);
		Элементы = ?(Уровень = 0, Дерево, Стек[Уровень - 1].Элемент.Элементы);
		Индекс = Узел.Индекс + 1;
		Если Индекс = Элементы.Количество() Тогда
			РаботаСМассивом.Взять(Стек);
			Уровень = Уровень - 1;
			Продолжить;
		КонецЕсли;
		Элемент = Элементы[Индекс];
		Стек[Уровень] = Новый Структура("Элемент, Индекс", Элемент, Индекс);
		Если Уровень = МаксУровень Тогда
			Возврат Истина;
		КонецЕсли;
		Узел = Новый Структура("Элемент, Индекс", Неопределено, -1);
		Стек.Добавить(Узел);
		Уровень = Уровень + 1;
	КонецЦикла;
КонецФункции

Процедура ДобавитьРезультатРаспределения() Экспорт
	ПолеРесурса = Схема.База.Ресурсы[0].Псевдоним;
	СуммаРаспределения = СтрокаРезультата[ПолеРесурса];
	Если СуммаРаспределения = 0 Тогда
		Возврат;
	КонецЕсли;
	ЭлементБазы.Строка[ПолеРесурса] = ЭлементБазы.Строка[ПолеРесурса] - СуммаРаспределения;
	ЭлементТаблицы.Строка[ПолеРесурса] = ЭлементТаблицы.Строка[ПолеРесурса] - СуммаРаспределения;
	ЗаполнитьЗначенияСвойств(РезультатРаспределения.Добавить(), СтрокаРезультата); 
КонецПроцедуры

Функция Следующий() Экспорт
	Уровень = Стек.ВГраница();
	Узел = Стек[Уровень];
	Если Уровень = МаксУровень И ЗначениеЗаполнено(Узел.Элемент) Тогда
		ДобавитьРезультатРаспределения();
	КонецЕсли;
	Если НЕ НайтиСледующийУзел(Уровень, Узел) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЭлементБазы = Стек[МаксУровень].Элемент;
	ЭлементТаблицы = Стек[0].Элемент;
	ЭлементОтношенияТекущий = Стек[1].Элемент;
	//  По порядку
	Если ВидРаспределения = ВидыРаспределения.ПоПорядку Тогда
		СтрокаРезультата = Новый Структура(ПоляРезультата);
		ЭлементОтношения = ЭлементОтношенияТекущий;
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЭлементТаблицы.Строка);
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЭлементБазы.Строка);
		ПолеРесурса = Схема.База.Ресурсы[0].Псевдоним;
		СуммаРаспределения = Макс(Мин(ЭлементТаблицы.Строка[ПолеРесурса], ЭлементБазы.Строка[ПолеРесурса]), 0);
		СтрокаРезультата[ПолеРесурса] = СуммаРаспределения;
		Возврат Истина;
	КонецЕсли;
	//  По базе / Полное
	Если ЭлементОтношенияТекущий <> ЭлементОтношения Тогда
		ЭлементОтношения = ЭлементОтношенияТекущий;
		ЕстьДопРесурсыТаблицы = Схема.Таблица.Ресурсы.Количество() > 1;
		ЕстьДопРесурсыБазы = Схема.База.Ресурсы.Количество() > 1;
		ЭтоПолноеРаспределение = (ВидРаспределения = ВидыРаспределения.ПоБазе);
		ПолеРесурса = Схема.База.Ресурсы[0].Псевдоним;
		Если ЕстьДопРесурсыТаблицы И ЕстьДопРесурсыБазы Тогда
			СрезРесурсов = Новый Массив;
			СрезыДопРесурсов = Новый Массив;
			СуммаБазы = 0;
			Для Каждого ЭлементБазы Из ЭлементОтношения.Элементы Цикл
				СтрокаБазы = ЭлементБазы.Строка;
				СуммаБазыПоСтроке = СтрокаБазы[ПолеРесурса];
				СрезРесурсов.Добавить(СуммаБазыПоСтроке);
				СрезДопРесурсов = Новый Массив;
				Для Индекс = 1 По Схема.База.Ресурсы.ВГраница() Цикл
					СрезДопРесурсов.Добавить(СтрокаБазы[Схема.База.Ресурсы[Индекс]]);
				КонецЦикла;
				СрезыДопРесурсов.Добавить(СрезДопРесурсов);
				СуммаБазы = СуммаБазы + СуммаБазыПоСтроке;
			КонецЦикла;
			СуммаРаспределения = ?(ЭтоПолноеРаспределение, ЭлементТаблицы.Строка[ПолеРесурса], Мин(ЭлементТаблицы.Строка[ПолеРесурса], СуммаБазы));
			СрезРаспределения = РаботаСМассивом.РаспределитьСумму(
				СуммаРаспределения
				, СрезРесурсов
				, Точность
			);
			Для Индекс = 0 По СрезРаспределения.ВГраница() Цикл
				СтрокаРезультата = Новый Структура(ПоляРезультата);
				ЭлементБазыОтношения = ЭлементОтношения.Элементы[Индекс];
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЭлементТаблицы.Строка);
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЭлементБазыОтношения.Строка);
				СуммаРаспределенияПоСтроке = СрезРаспределения[Индекс];
				СрезДопРесурсв = СрезыДопРесурсов[Индекс];
				СрезРаспределенияДопРесурсов = РаботаСМассивом.РаспределитьСумму(
					СуммаРаспределенияПоСтроке
					, СрезДопРесурсв
					, Точность
				);
				//  Пересчитать сумму по строке
				СуммаРаспределенияПоСтроке = 0;
				Для Индекс = 1 По Схема.База.Ресурсы.ВГраница() Цикл
					ПолеДопРесурса = Схема.База.Ресурсы[Индекс];
					СуммаРаспределенияДопРесурса = Мин(СрезРаспределенияДопРесурсов[Индекс - 1], ЭлементТаблицы.Строка[ПолеДопРесурса]);
					СтрокаРезультата[ПолеДопРесурса] = СуммаРаспределенияДопРесурса;
					СуммаРаспределенияПоСтроке = СуммаРаспределенияПоСтроке + СуммаРаспределенияДопРесурса;
				КонецЦикла;
				СтрокаРезультата[ПолеРесурса] = СуммаРаспределенияПоСтроке;
				ЭлементБазыОтношения.Вставить("СтрокаРезультата", СтрокаРезультата);
			КонецЦикла;
		ИначеЕсли ЕстьДопРесурсыБазы Тогда
			СрезРесурсов = Новый Массив;
			СрезыДопРесурсов = Новый Массив;
			СуммаБазы = 0;
			Для Каждого ЭлементБазы Из ЭлементОтношения.Элементы Цикл
				СтрокаБазы = ЭлементБазы.Строка;
				СуммаБазыПоСтроке = СтрокаБазы[ПолеРесурса];
				СрезРесурсов.Добавить(СуммаБазыПоСтроке);
				СрезДопРесурсов = Новый Массив;
				Для Индекс = 1 По Схема.База.Ресурсы.ВГраница() Цикл
					СрезДопРесурсов.Добавить(СтрокаБазы[Схема.База.Ресурсы[Индекс]]);
				КонецЦикла;
				СрезыДопРесурсов.Добавить(СрезДопРесурсов);
				СуммаБазы = СуммаБазы + СуммаБазыПоСтроке;
			КонецЦикла;
			СуммаРаспределения = ?(ЭтоПолноеРаспределение, ЭлементТаблицы.Строка[ПолеРесурса], Мин(ЭлементТаблицы.Строка[ПолеРесурса], СуммаБазы));
			СрезРаспределения = РаботаСМассивом.РаспределитьСумму(
				СуммаРаспределения
				, СрезРесурсов
				, Точность
			);
			Для Индекс = 0 По СрезРаспределения.ВГраница() Цикл
				СтрокаРезультата = Новый Структура(ПоляРезультата);
				ЭлементБазыОтношения = ЭлементОтношения.Элементы[Индекс];
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЭлементТаблицы.Строка);
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЭлементБазыОтношения.Строка);
				СуммаРаспределенияПоСтроке = СрезРаспределения[Индекс];
				СрезДопРесурсв = СрезыДопРесурсов[Индекс];
				СрезРаспределенияДопРесурсов = РаботаСМассивом.РаспределитьСумму(
					СуммаРаспределенияПоСтроке
					, СрезДопРесурсв
					, Точность
				);
				//  Пересчитать сумму по строке
				СуммаРаспределенияПоСтроке = 0;
				Для Индекс = 1 По Схема.База.Ресурсы.ВГраница() Цикл
					ПолеДопРесурса = Схема.База.Ресурсы[Индекс];
					СуммаРаспределенияДопРесурса = СрезРаспределенияДопРесурсов[Индекс - 1];
					СтрокаРезультата[ПолеДопРесурса] = СуммаРаспределенияДопРесурса;
					СуммаРаспределенияПоСтроке = СуммаРаспределенияПоСтроке + СуммаРаспределенияДопРесурса;
				КонецЦикла;
				СтрокаРезультата[ПолеРесурса] = СуммаРаспределенияПоСтроке;
				ЭлементБазыОтношения.Вставить("СтрокаРезультата", СтрокаРезультата);
			КонецЦикла;
		ИначеЕсли ЕстьДопРесурсыТаблицы Тогда
			СрезРесурсов = Новый Массив;
			СрезыДопРесурсов = Новый Массив;
			СуммаБазы = 0;
			СрезДопРесурсов = Новый Массив;
			Для Индекс = 1 По Схема.Таблица.Ресурсы.ВГраница() Цикл
				СрезДопРесурсов.Добавить(СтрокаБазы[Схема.Таблица.Ресурсы[Индекс]]);
			КонецЦикла;
			Для Каждого ЭлементБазы Из ЭлементОтношения.Элементы Цикл
				СтрокаБазы = ЭлементБазы.Строка;
				СуммаБазыПоСтроке = СтрокаБазы[ПолеРесурса];
				СрезРесурсов.Добавить(СуммаБазыПоСтроке);
				СуммаБазы = СуммаБазы + СуммаБазыПоСтроке;
			КонецЦикла;
			СуммаРаспределения = ?(ЭтоПолноеРаспределение, ЭлементТаблицы.Строка[ПолеРесурса], Мин(ЭлементТаблицы.Строка[ПолеРесурса], СуммаБазы));
			СрезРаспределения = РаботаСМассивом.РаспределитьСумму(
				СуммаРаспределения
				, СрезРесурсов
				, Точность
			);
			Для Индекс = 0 По СрезРаспределения.ВГраница() Цикл
				СтрокаРезультата = Новый Структура(ПоляРезультата);
				ЭлементБазыОтношения = ЭлементОтношения.Элементы[Индекс];
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЭлементТаблицы.Строка);
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЭлементБазыОтношения.Строка);
				СуммаРаспределенияПоСтроке = СрезРаспределения[Индекс];
				СрезДопРесурсв = СрезыДопРесурсов[Индекс];
				СрезРаспределенияДопРесурсов = РаботаСМассивом.РаспределитьСумму(
					СуммаРаспределенияПоСтроке
					, СрезДопРесурсв
					, Точность
				);
				//  Пересчитать сумму по строке
				СуммаРаспределенияПоСтроке = 0;
				Для Индекс = 1 По Схема.Таблица.Ресурсы.ВГраница() Цикл
					ПолеДопРесурса = Схема.Таблица.Ресурсы[Индекс];
					СуммаРаспределенияДопРесурса = СрезРаспределенияДопРесурсов[Индекс - 1];
					СтрокаРезультата[ПолеДопРесурса] = СуммаРаспределенияДопРесурса;
					СуммаРаспределенияПоСтроке = СуммаРаспределенияПоСтроке + СуммаРаспределенияДопРесурса;
					СрезДопРесурсов[Индекс - 1] = СрезДопРесурсов[Индекс - 1] - СуммаРаспределенияДопРесурса; 
				КонецЦикла;
				СтрокаРезультата[ПолеРесурса] = СуммаРаспределенияПоСтроке;
				ЭлементБазыОтношения.Вставить("СтрокаРезультата", СтрокаРезультата);
			КонецЦикла;
		Иначе
			СрезРесурсов = Новый Массив;
			СуммаБазы = 0;
			Для Каждого ЭлементБазы Из ЭлементОтношения.Элементы Цикл
				СтрокаБазы = ЭлементБазы.Строка;
				СуммаБазыПоСтроке = СтрокаБазы[ПолеРесурса];
				СрезРесурсов.Добавить(СуммаБазыПоСтроке);
				СуммаБазы = СуммаБазы + СуммаБазыПоСтроке;
			КонецЦикла;
			СуммаРаспределения = ?(ЭтоПолноеРаспределение, ЭлементТаблицы.Строка[ПолеРесурса], Мин(ЭлементТаблицы.Строка[ПолеРесурса], СуммаБазы));
			СрезРаспределения = РаботаСМассивом.РаспределитьСумму(
				СуммаРаспределения
				, СрезРесурсов
				, Точность
			);
			Для Индекс = 0 По СрезРаспределения.ВГраница() Цикл
				СтрокаРезультата = Новый Структура(ПоляРезультата);
				ЭлементБазыОтношения = ЭлементОтношения.Элементы[Индекс];
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЭлементТаблицы.Строка);
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЭлементБазыОтношения.Строка);
				СтрокаРезультата[ПолеРесурса] = СрезРаспределения[Индекс];
				ЭлементБазыОтношения.Вставить("СтрокаРезультата", СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция Распределить() Экспорт
	Инициализировать();
	Пока Следующий() Цикл
	КонецЦикла;
	Сбросить();
	Возврат ЭтотОбъект;
КонецФункции

Функция ПустаяТаблица() Экспорт
	Возврат ТаблицаРаспределения.Итог(ПолеРаспределения) = 0;
КонецФункции

Функция ПустаяБаза() Экспорт
	Возврат БазаРаспределения.Итог(ПолеРаспределения) = 0;
КонецФункции

Функция ПустойРезультат() Экспорт
	Возврат РезультатРаспределения.Итог(ПолеРаспределения) = 0;
КонецФункции

Функция ВыгрузитьРезультат() Экспорт
	Возврат РезультатРаспределения.Скопировать();
КонецФункции

Функция ОстатокТаблицы() Экспорт
	Возврат ТаблицаРаспределения;
КонецФункции

Функция ОстатокБазы() Экспорт
	Возврат БазаРаспределения;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Функция ДобавитьИсточникМодели(ТипИсточника, ИмяИсточника, Псевдоним = "")
	Перем Источник;
	Источник = СтруктураИсточника(ИмяИсточника, Псевдоним);
	Схема.Вставить(ТипИсточника, Источник);
	Возврат Источник;
КонецФункции

Процедура ДобавитьПоляИсточника(МодельЗапроса, Источник, Секция)
	Перем Измерения;
	Если Источник.Свойство(Секция, Измерения) Тогда
		Если Секция = "Ресурсы" Тогда
			Для Каждого Поле Из Измерения Цикл
				МодельЗапроса
					.Поле(СтрШаблон("ВЫРАЗИТЬ(%1 КАК ЧИСЛО(%2, %3))", Поле.Поле, 15, Точность), ?(ЗначениеЗаполнено(Поле.Псевдоним), Поле.Псевдоним, Поле.Поле))
				;
			КонецЦикла;
			Возврат;
		КонецЕсли;
		Для Каждого Поле Из Измерения Цикл
			МодельЗапроса
				.Поле(Поле.Поле, Поле.Псевдоним)
			;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьЗапросИсточника(МодельЗапроса, ИмяИсточника)
	Источник = Схема[ИмяИсточника];
	Если ТипЗнч(Источник.Источник) = Тип("Строка") Тогда
		МодельЗапроса.ЗапросПакета(ИмяИсточника)
			.Источник(Источник.Источник, Источник.Псевдоним)
		;
	Иначе
		МодельЗапроса.ЗапросПакета().Поместить(Источник.Псевдоним)
			.Источник(Источник.Источник, Источник.Псевдоним)
			.Поле("*")
		;
		МодельЗапроса.ЗапросПакета(ИмяИсточника)
			.Источник(Источник.Псевдоним)
		;
	КонецЕсли;
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "ИзмеренияТаблицы");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "ИзмеренияБазы");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "Измерения");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "Реквизиты");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "Ресурсы");
	Для Каждого Порядок Из Источник.Порядок Цикл
		МодельЗапроса
			.Порядок(Порядок.Выражение, Порядок.Направление)
		;
	КонецЦикла;
	Для Каждого ВыражениеОтбора Из Источник.Отбор Цикл
		МодельЗапроса
			.Отбор(ВыражениеОтбора)
		;
	КонецЦикла;
	Если Источник.Автопорядок Тогда
		МодельЗапроса
			.Автопорядок()
		;
	КонецЕсли;
КонецПроцедуры

Функция Абс(Значение)
	Возврат ?(Значение < 0, -Значение, Значение);
КонецФункции

Функция Знак(Значение)
	Возврат ?(Значение < 0, -1, 1);
КонецФункции

Функция Срез(МассивИсточника, НачальныйИндекс = 0)
	Результат = Новый Массив;
	Для й = НачальныйИндекс По МассивИсточника.ВГраница() Цикл
		Результат.Добавить(МассивИсточника[й]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СтруктураСтроки(Таблица)
	Результат = Новый Структура;
	Для каждого Колонка Из Таблица.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ДобавитьИсточник(МодельЗапроса, Псевдоним)
	Источник = Схема[Псевдоним];
	МодельЗапроса
		.Источник(Источник.Источник)
	;
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "ИзмеренияТаблицы");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "ИзмеренияБазы");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "Измерения");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "Реквизиты");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "Ресурсы");
КонецПроцедуры

Функция СтруктураПоля(Поле, Псевдоним = "")
	_Поле = Новый Структура;
	_Поле.Вставить("Поле", Поле);
	_Поле.Вставить("Псевдоним", Псевдоним);
	Возврат _Поле;
КонецФункции

Функция СтруктураИсточника(ИмяИсточника = "", Псевдоним = "")
	_Источник = Новый Структура;
	_Источник.Вставить("Источник", ИмяИсточника);
	_Источник.Вставить("ЭтоИсточникИзОбъекта", ?(ТипЗнч(ИмяИсточника) = Тип("Строка"), Ложь, Истина));
	_Источник.Вставить("Псевдоним", ?(НЕ ЗначениеЗаполнено(Псевдоним), ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору(), Псевдоним));
	_Источник.Вставить("Порядок", Новый Массив);
	_Источник.Вставить("Отбор", Новый Массив);
	_Источник.Вставить("Автопорядок", Ложь);
	Возврат _Источник;
КонецФункции

Процедура Сбросить()
	Перем ОписаниеТаблицы;
	Если Схема <> Неопределено Тогда
		ТаблицыДляУдаления = Новый Массив;
		Если Схема.Свойство("Таблица", ОписаниеТаблицы) И ОписаниеТаблицы.ЭтоИсточникИзОбъекта Тогда
			ТаблицыДляУдаления.Добавить(ОписаниеТаблицы.Псевдоним);
		КонецЕсли;
		Если Схема.Свойство("База", ОписаниеТаблицы) И ОписаниеТаблицы.ЭтоИсточникИзОбъекта Тогда
			ТаблицыДляУдаления.Добавить(ОписаниеТаблицы.Псевдоним);
		КонецЕсли;
		Если Схема.Свойство("Отношение", ОписаниеТаблицы) И ОписаниеТаблицы.ЭтоИсточникИзОбъекта Тогда
			ТаблицыДляУдаления.Добавить(ОписаниеТаблицы.Псевдоним);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицыДляУдаления) Тогда
			МодельЗапроса = Общий.МодельЗапроса(МенеджерВременныхТаблиц);
			Для каждого ТаблицаДляУдаления Из ТаблицыДляУдаления Цикл
				МодельЗапроса.Уничтожить(ТаблицаДляУдаления)
			КонецЦикла;
			МодельЗапроса.ВыполнитьЗапрос();
		КонецЕсли;
	КонецЕсли;
	ТипПоля = "";
	ТипИсточника = "";
	Источник = Неопределено;
	Схема = Новый Структура;
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Сбросить();
Точность = 2;
//  ПоПорядку - база упорядочена, отношение упорядочено
//  ПропорциональноБазе - база не упорядочена, отношение упорядочено
//  ПропорциональноОтношению - база не упорядочена, отношение не упорядочено
ВидыРаспределения = Новый Структура("ПоПорядку, ПоБазе, Полное", 1, 2, 3);

#КонецОбласти
